{"title":"前端现代模块化机制","date":"2021-12-26T17:50:21.000Z","date_formatted":{"ll":"Dec 27, 2021","L":"12/27/2021","MM-DD":"12-27"},"link":"2021/12/27/engineering-1","tags":["FE"],"updated":"2022-01-03T15:39:15.838Z","content":"<p>模块化的好处：</p>\n<ol>\n<li>避免命名冲突</li>\n<li>代码结构分离，高可维护性、高可复用性</li>\n<li>按需加载</li>\n</ol>\n<h2 id=\"前端模块化的演变\">前端模块化的演变<a title=\"#前端模块化的演变\" href=\"#前端模块化的演变\"></a></h2>\n<hr>\n<p>function 模式 -&gt; 命名空间（namespace） -&gt; 自执行函数（IIFE） -&gt; IIFE 增强 -&gt; CommonJS、AMD、CMD、ES6 模块化</p>\n<h3 id=\"1.-全局的-function-模式\">1. 全局的 function 模式<a title=\"#1.-全局的-function-模式\" href=\"#1.-全局的-function-模式\"></a></h3>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo1</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// do something …</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo2</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// do something …</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>利用了函数作用域的特性来分割变量和实现不同的功能</p>\n<p><strong>缺点：</strong> 函数都声明在了全局环境下，污染全局变量</p>\n<h3 id=\"2.-命名空间（namespace）模式\">2. 命名空间（namespace）模式<a title=\"#2.-命名空间（namespace）模式\" href=\"#2.-命名空间（namespace）模式\"></a></h3>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"built_in\">module</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">data</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">  <span class=\"attr\">sayName</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">name</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;hello, &quot;</span> + name);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">add</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">num1, num2</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> num1 + num2;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.data = <span class=\"number\">2</span>; <span class=\"comment\">// 修改了 module 中的数据</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.sayName(<span class=\"string\">&quot;noko&quot;</span>);</span><br></pre></td></tr></table></figure>\n<p>将变量和函数作为一个对象的属性，整合起来的对象就是一个模块，</p>\n<p><strong>缺点：</strong> 数据不安全，容易篡改模块对象中的数据和方法</p>\n<h3 id=\"3.-自执行函数（iife）和闭包\">3. 自执行函数（IIFE）和闭包<a title=\"#3.-自执行函数（iife）和闭包\" href=\"#3.-自执行函数（iife）和闭包\"></a></h3>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">;(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"><span class=\"built_in\">window</span></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> data = <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> setData = <span class=\"function\">(<span class=\"params\">newData</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    data = newData</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> getData = <span class=\"function\">() =&gt;</span> <span class=\"built_in\">console</span>.log(data)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">window</span>.module = &#123;</span><br><span class=\"line\">    setData,</span><br><span class=\"line\">    getData</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;)(<span class=\"built_in\">window</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.getData() <span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.setData(<span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"built_in\">module</span>.getData() <span class=\"comment\">// 2</span></span><br></pre></td></tr></table></figure>\n<p>数据私有化，外部只能通过暴露的方法获取和修改</p>\n<p><strong>缺点：</strong> 没有引入依赖的机制</p>\n<h3 id=\"4.-iife-增强版-——-现代模块化的基础\">4. IIFE 增强版 —— 现代模块化的基础<a title=\"#4.-iife-增强版-——-现代模块化的基础\" href=\"#4.-iife-增强版-——-现代模块化的基础\"></a></h3>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">;(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"><span class=\"built_in\">window</span>, $</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> data = <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> setData = <span class=\"function\">(<span class=\"params\">newData</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    data = newData</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> getData = <span class=\"function\">() =&gt;</span> <span class=\"built_in\">console</span>.log(data)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> changeColor = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    $(<span class=\"string\">&#x27;body&#x27;</span>).css(<span class=\"string\">&#x27;background&#x27;</span>, <span class=\"string\">&#x27;red&#x27;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">window</span>.module = &#123;</span><br><span class=\"line\">    setData,</span><br><span class=\"line\">    getData,</span><br><span class=\"line\">    changeColor</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;)(<span class=\"built_in\">window</span>, jQuery)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">window</span>.changeColor()</span><br></pre></td></tr></table></figure>\n<p>模块互相独立，模块也可以引进另外一个模块，依赖关系清晰</p>\n<p><strong>缺点：</strong> 引入其他模块或者第三方库时，要注意引入的先后顺序</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// html 文件按顺序引入</span></span><br><span class=\"line\">&lt;script type=<span class=\"string\">&quot;text/javascript&quot;</span> src=<span class=\"string\">&quot;jquery-1.10.1.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/javascript&quot;</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;module.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/javascript&quot;</span>&gt;</span><span class=\"javascript\"></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">  <span class=\"built_in\">module</span>.changeColor()</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n<h2 id=\"前端现代模块化\">前端现代模块化<a title=\"#前端现代模块化\" href=\"#前端现代模块化\"></a></h2>\n<hr>\n<p>前端目前模块化规范：CommonJS、AMD、CMD、ES6 模块化</p>\n<h3 id=\"commonjs\">CommonJS<a title=\"#commonjs\" href=\"#commonjs\"></a></h3>\n<p>一个文件就是一个模块，模块间数据互相独立。</p>\n<p>在服务器端，运行时同步加载模块；浏览器端，模块需编译处理。</p>\n<p>四个重要对象：</p>\n<ul>\n<li>module</li>\n</ul>\n<p>每个模块内部都有一个 module 对象</p>\n<blockquote>\n<p><a href=\"http://module.id\">module.id</a> 模块的识别符，通常是带有绝对路径的模块文件名。 module.filename 模块的文件名，带有绝对路径。module.loaded 返回一个布尔值，表示模块是否已经完成加载。<br>\nmodule.parent 返回一个对象，表示调用该模块的模块。<br>\nmodule.children 返回一个数组，表示该模块要用到的其他模块。module.exports 表示模块对外输出的值。</p>\n</blockquote>\n<ul>\n<li>exports</li>\n</ul>\n<p>exports 是 <code>module.exports</code> 的引用，指向 module 对象下的属性 exports，相当于</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"built_in\">exports</span> = <span class=\"built_in\">module</span>.exports;</span><br></pre></td></tr></table></figure>\n<p>避免以下引起 exports 直接复制，切断了与 module.exports 的联系</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">exports</span>.hello = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">&quot;hello&quot;</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"string\">&quot;Hello world&quot;</span>;</span><br></pre></td></tr></table></figure>\n<p><strong>所以不建议使用 exports，而建议使用 module.exports 导出模块。</strong></p>\n<ul>\n<li>require</li>\n</ul>\n<blockquote>\n<p>用于加载 module.exports 的模块</p>\n</blockquote>\n<ul>\n<li>global</li>\n</ul>\n<blockquote>\n<p>所有模块都能访问到 global 对象</p>\n</blockquote>\n<p><strong>使用场景：</strong> Node.js、小程序、浏览器（Browserify）</p>\n<p><strong>特点：</strong></p>\n<ul>\n<li>运行时加载，并且第一次加载模块后会被缓存</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">&quot;./example.js&quot;</span>); <span class=\"comment\">// 程序执行到这里开始加载，并且缓存到 require.cache 对象</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">&quot;./example.js&quot;</span>).message = <span class=\"string\">&quot;hello&quot;</span>;</span><br><span class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">&quot;./example.js&quot;</span>).message;</span><br></pre></td></tr></table></figure>\n<p>程序执行到这里开始加载，并且缓存到 <code>require.cache</code> 对象，所有的模块缓存都在这个对象中。</p>\n<ul>\n<li>同步加载模块</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> a = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;./a&quot;</span>); <span class=\"comment\">// 执行到此处时，a.js 才同步下载并执行</span></span><br></pre></td></tr></table></figure>\n<p>在浏览器中可以使用 browserify 实现，由于 CommonJS 同步加载的方式，而同步意味着阻塞加载，所以在浏览器环境并不适用；而服务器文件都在在本地，加载速度快，CommonJS 是适用的。</p>\n<p><strong>举一个栗子 🌰：</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 定义模块math.js</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> basicNum = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add</span>(<span class=\"params\">a, b</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> a + b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  <span class=\"comment\">//在这里写上需要向外暴露的函数、变量</span></span><br><span class=\"line\">  <span class=\"attr\">add</span>: add,</span><br><span class=\"line\">  <span class=\"attr\">basicNum</span>: basicNum,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 引用自定义的模块时，参数包含路径，可省略.js</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> math = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;./math&#x27;</span>);</span><br><span class=\"line\">math.add(<span class=\"number\">2</span>, <span class=\"number\">5</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 引用核心模块时，不需要带路径</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;http&#x27;</span>);</span><br><span class=\"line\">http.createService(...).listen(<span class=\"number\">3000</span>);</span><br></pre></td></tr></table></figure>\n<h3 id=\"amd-和-require.js\">AMD 和 require.js<a title=\"#amd-和-require.js\" href=\"#amd-和-require.js\"></a></h3>\n<p>由于 CommonJS 的同步加载的机制并不适用于浏览器，从而出现了 AMD 异步加载的模块化规范。用于浏览器 require.js，是 AMD 规范的实现。</p>\n<ul>\n<li>定义暴露模块</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//定义没有依赖的模块</span></span><br><span class=\"line\">define(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> 模块;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//定义有依赖的模块</span></span><br><span class=\"line\">define([<span class=\"string\">&quot;module1&quot;</span>, <span class=\"string\">&quot;module2&quot;</span>], <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">m1, m2</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> 模块;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<ul>\n<li>引入使用模块</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">require</span>([<span class=\"string\">&quot;module1&quot;</span>, <span class=\"string\">&quot;module2&quot;</span>], <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">m1, m2</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 使用m1/m2</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p><strong>使用场景：</strong> 浏览器</p>\n<p><strong>特点：</strong></p>\n<ul>\n<li>异步加载，提前执行依赖</li>\n</ul>\n","prev":{"title":"👋🏻Goodbye 2021","link":"2022/01/03/flags-2"},"next":{"title":"🍭Flags for 2021","link":"2021/10/27/flags-1"},"plink":"https://imunoko.top/2021/12/27/engineering-1/","toc":[{"id":"前端模块化的演变","title":"前端模块化的演变","index":"1","children":[{"id":"1.-全局的-function-模式","title":"1. 全局的 function 模式","index":"1.1"},{"id":"2.-命名空间（namespace）模式","title":"2. 命名空间（namespace）模式","index":"1.2"},{"id":"3.-自执行函数（iife）和闭包","title":"3. 自执行函数（IIFE）和闭包","index":"1.3"},{"id":"4.-iife-增强版-——-现代模块化的基础","title":"4. IIFE 增强版 —— 现代模块化的基础","index":"1.4"}]},{"id":"前端现代模块化","title":"前端现代模块化","index":"2","children":[{"id":"commonjs","title":"CommonJS","index":"2.1"},{"id":"amd-和-require.js","title":"AMD 和 require.js","index":"2.2"}]}],"copyright":{"license":"自由转载-非商用-禁止演绎-保持署名 (<a href=\\\"https://creativecommons.org/licenses/by-nc-sa/4.0/\\\" rel=\\\"external nofollow\\\" target=\\\"_blank\\\">CC BY-NC-ND 4.0</a>)","author":"imunoko"},"reading_time":"1218 words in 6 min"}